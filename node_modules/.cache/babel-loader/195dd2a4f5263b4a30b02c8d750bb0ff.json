{"ast":null,"code":"var _jsxFileName = \"/Users/kashita/Desktop/dbfrontend/src/components/StartProcess.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Form, Button, Col } from \"react-bootstrap\";\nimport axios from \"axios\";\nimport authHeader from \"../auth.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst StartProcess = ({\n  processNames,\n  serverNames\n}) => {\n  _s();\n\n  const [server, setServer] = useState(\"Select Server\");\n  const [process, setProcess] = useState(\"Select Process\");\n  const [displayProcess, setDisplayProcess] = useState([]);\n  const [ipAddress, setIpAddress] = useState();\n  const [port, setPort] = useState();\n\n  const handleSelectServer = e => {\n    setServer(e);\n    let i = 0;\n\n    for (i = 0; i < serverNames.length; i++) {\n      if (serverNames[i].serverName === e) break;\n    }\n\n    let selectedProcesses = [];\n\n    for (let j = 0; j < serverNames[i].processIds.length; j++) {\n      for (let k = 0; k < processNames.length; k++) {\n        if (serverNames[i].processIds[j] === processNames[k]._id) {\n          let p = processNames[k].processName; // p = p.substring(0, p.length - 3);\n\n          selectedProcesses.push(p);\n        }\n      }\n    }\n\n    setDisplayProcess(selectedProcesses);\n    setIpAddress(serverNames[i].ipAddress);\n    setPort(serverNames[i].port);\n  };\n\n  const handleSelectProcess = e => {\n    setProcess(e);\n  };\n\n  const onSubmit = e => {\n    e.preventDefault();\n\n    if (server === \"Select Server\" || process === \"Select Process\") {\n      alert(\"Select a server and a process.\");\n      return;\n    }\n\n    axios.post(\"http://localhost:4000/api/server/processes/start\", {\n      pname: process,\n      sip: ipAddress,\n      port: port\n    }, {\n      headers: authHeader()\n    }).then(res => {\n      alert(\"Process started successfully.\");\n    }).catch(err => {\n      alert(\"Failed to start process\");\n    });\n    setServer(\"Select Server\");\n    setProcess(\"Select Process\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form-container\",\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      children: [/*#__PURE__*/_jsxDEV(Form.Row, {\n        className: \"form\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          as: Col,\n          controlId: \"exampleForm.ControlSelect1\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            className: \"form-label\",\n            children: \"Server Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            as: \"select\",\n            onChange: e => handleSelectServer(e.target.value),\n            value: server,\n            className: \"form-control\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 15\n            }, this), serverNames && serverNames.map(s => /*#__PURE__*/_jsxDEV(\"option\", {\n              children: s.serverName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 40\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          as: Col,\n          controlId: \"exampleForm.ControlSelect1\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            className: \"form-label\",\n            children: \"Process Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            as: \"select\",\n            onChange: e => handleSelectProcess(e.target.value),\n            value: process,\n            className: \"form-control\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 15\n            }, this), displayProcess && displayProcess.map(p => /*#__PURE__*/_jsxDEV(\"option\", {\n              children: [\" \", p, \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 43\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        className: \"custom-btn-primary\",\n        variant: \"primary\",\n        onClick: onSubmit,\n        children: \"Start\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n};\n\n_s(StartProcess, \"knbSVCamKd0Q3p1hnj1E6jTRHag=\");\n\n_c = StartProcess;\nexport default StartProcess;\n\nvar _c;\n\n$RefreshReg$(_c, \"StartProcess\");","map":{"version":3,"sources":["/Users/kashita/Desktop/dbfrontend/src/components/StartProcess.js"],"names":["React","useState","Form","Button","Col","axios","authHeader","StartProcess","processNames","serverNames","server","setServer","process","setProcess","displayProcess","setDisplayProcess","ipAddress","setIpAddress","port","setPort","handleSelectServer","e","i","length","serverName","selectedProcesses","j","processIds","k","_id","p","processName","push","handleSelectProcess","onSubmit","preventDefault","alert","post","pname","sip","headers","then","res","catch","err","target","value","map","s"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Form, Button, Col } from \"react-bootstrap\";\nimport axios from \"axios\";\nimport authHeader from \"../auth.js\";\n\nconst StartProcess = ({ processNames, serverNames }) => {\n  const [server, setServer] = useState(\"Select Server\");\n  const [process, setProcess] = useState(\"Select Process\");\n\n  const [displayProcess, setDisplayProcess] = useState([]);\n  const [ipAddress, setIpAddress] = useState();\n  const [port, setPort] = useState();\n\n  const handleSelectServer = (e) => {\n    setServer(e);\n\n    let i = 0;\n    for (i = 0; i < serverNames.length; i++) {\n      if (serverNames[i].serverName === e) break;\n    }\n\n    let selectedProcesses = [];\n    for (let j = 0; j < serverNames[i].processIds.length; j++) {\n      for (let k = 0; k < processNames.length; k++) {\n        if (serverNames[i].processIds[j] === processNames[k]._id) {\n          let p = processNames[k].processName;\n          // p = p.substring(0, p.length - 3);\n          selectedProcesses.push(p);\n        }\n      }\n    }\n    setDisplayProcess(selectedProcesses);\n    setIpAddress(serverNames[i].ipAddress);\n    setPort(serverNames[i].port);\n  };\n\n  const handleSelectProcess = (e) => {\n    setProcess(e);\n  };\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n\n    if (server === \"Select Server\" || process === \"Select Process\") {\n      alert(\"Select a server and a process.\");\n      return;\n    }\n\n    axios\n      .post(\n        \"http://localhost:4000/api/server/processes/start\",\n        {\n          pname: process,\n          sip: ipAddress,\n          port: port,\n        },\n        {\n          headers: authHeader(),\n        }\n      )\n      .then((res) => {\n        alert(\"Process started successfully.\");\n      })\n      .catch((err) => {\n        alert(\"Failed to start process\");\n      });\n\n    setServer(\"Select Server\");\n    setProcess(\"Select Process\");\n  };\n\n  return (\n    <div className=\"form-container\">\n      <Form>\n        <Form.Row className=\"form\">\n          <Form.Group as={Col} controlId=\"exampleForm.ControlSelect1\">\n            <Form.Label className=\"form-label\">Server Name</Form.Label>\n            <Form.Control\n              as=\"select\"\n              onChange={(e) => handleSelectServer(e.target.value)}\n              value={server}\n              className=\"form-control\"\n            >\n              <option></option>\n              {serverNames &&\n                serverNames.map((s) => <option>{s.serverName}</option>)}\n            </Form.Control>\n          </Form.Group>\n          <Form.Group as={Col} controlId=\"exampleForm.ControlSelect1\">\n            <Form.Label className=\"form-label\">Process Name</Form.Label>\n            <Form.Control\n              as=\"select\"\n              onChange={(e) => handleSelectProcess(e.target.value)}\n              value={process}\n              className=\"form-control\"\n            >\n              <option></option>\n              {displayProcess &&\n                displayProcess.map((p) => <option> {p} </option>)}\n            </Form.Control>\n          </Form.Group>\n        </Form.Row>\n        <Button\n          className=\"custom-btn-primary\"\n          variant=\"primary\"\n          onClick={onSubmit}\n        >\n          Start\n        </Button>\n      </Form>\n    </div>\n  );\n};\n\nexport default StartProcess;\n"]},"metadata":{},"sourceType":"module"}