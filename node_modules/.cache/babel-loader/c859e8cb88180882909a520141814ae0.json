{"ast":null,"code":"var _jsxFileName = \"/Users/kashita/Desktop/DB/db_project/frontend/src/App.js\",\n    _s = $RefreshSig$();\n\nimport \"./App.css\";\nimport { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Route, Link, Switch } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport axios from \"axios\";\nimport Table from \"react-bootstrap/Table\";\nimport Header from \"./components/Header\";\nimport TableRows from \"./components/TableRows\";\nimport TableHead from \"./components/TableHead\"; //import ProcessTable from \"./components/ProcessTable\";\n\nimport Filters from \"./components/Filters\";\nimport StartProcess from \"./components/StartProcess\";\nimport Dashboard from \"./components/Dashboard\";\nimport Login from \"./Login\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const details = [{\n    server: \"scripts\",\n    process: [\"p1\", \"p2\", \"process1\"]\n  } // {\n  //   server: \"server2\",\n  //   process: [\"p1\", \"p2\", \"p3\"],\n  // },\n  // {\n  //   server: \"server3\",\n  //   process: [\"p1\", \"p4\"],\n  // },\n  ];\n  const runningProcesses = [{\n    startTime: \"04/19/17 04:34:22 +0000\",\n    serverName: \"CyberDust.internal\",\n    processName: \"query_tests\",\n    instanceID: 114,\n    Status: \"10\",\n    serverId: 1,\n    processId: 1,\n    status: \"Completed\"\n  }, {\n    startTime: \"05/23/17 04:34:22 +1200\",\n    serverName: \"Skynet.dedicated\",\n    processName: \"transaction_checks\",\n    instanceID: 4450,\n    Status: \"60\",\n    serverId: 2,\n    processId: 2,\n    status: \"Failed\"\n  }, {\n    startTime: \"14/06/17 04:34:22 +0000\",\n    serverName: \"Perplexed\",\n    processName: \"rollback_execute\",\n    instanceID: 8901,\n    Status: \"30\",\n    serverId: 3,\n    processId: 3,\n    status: \"In Progress\"\n  }, {\n    startTime: \"04/23/17 04:34:22 +1930\",\n    serverName: \"Grimlock.lantern\",\n    processName: \"deadlock_detect\",\n    instanceID: 1230,\n    Status: \"40\",\n    serverId: 4,\n    processId: 4,\n    status: \"Failed\"\n  }, {\n    startTime: \"04/23/17 04:34:22 +0800\",\n    serverName: \"CyberDust.internal\",\n    processName: \"data_parser\",\n    instanceID: 240,\n    Status: \"90\",\n    serverId: 5,\n    processId: 5,\n    status: \"Completed\"\n  }]; //fetched from database\n\n  const completedProcesses = [{\n    startTime: \"04/19/17 04:34:22 +0000\",\n    serverName: \"CyberDust.domain\",\n    processName: \"query_tests\",\n    instanceID: 1301,\n    Status: \"Completed\",\n    serverId: 6,\n    processId: 6,\n    status: \"Completed\"\n  }, {\n    startTime: \"05/23/17 04:34:22 +1200\",\n    serverName: \"NoNameServer\",\n    processName: \"transaction_checks\",\n    instanceID: 2002,\n    Status: \"Failed\",\n    serverId: 7,\n    processId: 7,\n    status: \"Completed\"\n  }, {\n    startTime: \"14/06/17 04:34:22 +0000\",\n    serverName: \"Perplexed\",\n    processName: \"rollback_execute\",\n    instanceID: 2302,\n    Status: \"Completed\",\n    serverId: 8,\n    processId: 8,\n    status: \"Completed\"\n  }, {\n    startTime: \"04/23/17 04:34:22 +1930\",\n    serverName: \"Grimlock.lantern\",\n    processName: \"deadlock_detect\",\n    instanceID: 2221,\n    Status: \"Completed\",\n    serverId: 9,\n    processId: 9,\n    status: \"Completed\"\n  }];\n  const [processes, setProcesses] = useState([]);\n  const tableHeadDetails = [\"Start Time\", \"Server Name\", \"Process Name\", \"Instance ID\", \"Status\", \"Action\", \"Details\"]; // Filters\n\n  const [filters, setFilters] = useState({\n    serverId: 0,\n    processId: 0,\n    processName: \"\",\n    serverName: \"\",\n    status: \"\"\n  });\n\n  const filterProcesses = (processId, serverId, processName, serverName, status) => {\n    setFilters({ ...filters,\n      processId: processId === \"\" ? 0 : parseInt(processId),\n      serverId: serverId === \"\" ? 0 : parseInt(serverId),\n      processName: processName === \"\" ? \"\" : processName,\n      serverName: serverName === \"\" ? \"\" : serverName,\n      status: status === \"\" ? \"\" : status\n    });\n  };\n\n  const getInitialData = async () => {\n    await axios.get(\"http://localhost:4000/api/server/processes/status\").then(resp => {\n      console.log(resp);\n      setProcesses(resp.data);\n    }).catch(err => {\n      console.log(err);\n    });\n  }; // getInitialData();\n  // useEffect(() => {\n  //   let initialState;\n  //   setProcesses(initialState);\n  //   console.log(processes);\n  // }, [processes]);\n\n\n  useEffect(() => {\n    getInitialData();\n    const interval = setInterval(async () => {\n      let processStatus;\n      await axios.get(\"http://localhost:4000/api/server/processes/status\").then(resp => {\n        processStatus = resp.data;\n      }).catch(err => {\n        console.log(err);\n      });\n      setProcesses(processStatus);\n      console.log(processes);\n    }, 15 * 1000);\n    return () => clearInterval(interval);\n  }, [processes]);\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(Switch, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: \"/Login\",\n        render: () => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\" \", /*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 17\n            }, this), \" \", /*#__PURE__*/_jsxDEV(Login, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 28\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 15\n          }, this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: \"/\",\n        render: () => {\n          /*#__PURE__*/\n          _jsxDEV(Dashboard, {\n            details: details,\n            filterProcesses: filterProcesses,\n            processes: processes,\n            tableHeadDetails: tableHeadDetails,\n            filters: filters\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 13\n          }, this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 207,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"gorweQ2Ci4w+e0FgiqtGV5uA4Mc=\");\n\n_c = App;\nexport default App; // useEffect(() => {\n//   let initialState;\n//   const getInitialData = async () => {\n//     await axios\n//       .get(\"http://localhost:4000/api/server/processes/status\")\n//       .then((resp) => {\n//         initialState = resp.data;\n//         console.log(resp);\n//       })\n//       .catch((err) => {\n//         console.log(err);\n//       });\n//   };\n//   getInitialData();\n//   setProcesses(initialState);\n//   console.log(processes);\n// }, [processes]);\n// useEffect(() => {\n//   const interval = setInterval(async () => {\n//     let processStatus;\n//     await axios\n//       .get(\"http://localhost:4000/api/server/processes/status\")\n//       .then((resp) => {\n//         processStatus = resp.data;\n//       })\n//       .catch((err) => {\n//         console.log(err);\n//       });\n//     setProcesses(processStatus);\n//     console.log(processes);\n//   }, 15 * 1000);\n//   return () => clearInterval(interval);\n// }, [processes]);\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/kashita/Desktop/DB/db_project/frontend/src/App.js"],"names":["useState","useEffect","BrowserRouter","Router","Route","Link","Switch","axios","Table","Header","TableRows","TableHead","Filters","StartProcess","Dashboard","Login","App","details","server","process","runningProcesses","startTime","serverName","processName","instanceID","Status","serverId","processId","status","completedProcesses","processes","setProcesses","tableHeadDetails","filters","setFilters","filterProcesses","parseInt","getInitialData","get","then","resp","console","log","data","catch","err","interval","setInterval","processStatus","clearInterval"],"mappings":"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","sourcesContent":["import \"./App.css\";\nimport { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Route, Link, Switch } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport axios from \"axios\";\n\nimport Table from \"react-bootstrap/Table\";\nimport Header from \"./components/Header\";\n\nimport TableRows from \"./components/TableRows\";\nimport TableHead from \"./components/TableHead\";\n//import ProcessTable from \"./components/ProcessTable\";\n\nimport Filters from \"./components/Filters\";\nimport StartProcess from \"./components/StartProcess\";\nimport Dashboard from \"./components/Dashboard\";\nimport Login from \"./Login\";\n\nfunction App() {\n  const details = [\n    {\n      server: \"scripts\",\n      process: [\"p1\", \"p2\", \"process1\"],\n    },\n    // {\n    //   server: \"server2\",\n    //   process: [\"p1\", \"p2\", \"p3\"],\n    // },\n    // {\n    //   server: \"server3\",\n    //   process: [\"p1\", \"p4\"],\n    // },\n  ];\n  const runningProcesses = [\n    {\n      startTime: \"04/19/17 04:34:22 +0000\",\n      serverName: \"CyberDust.internal\",\n      processName: \"query_tests\",\n      instanceID: 114,\n      Status: \"10\",\n      serverId: 1,\n      processId: 1,\n      status: \"Completed\",\n    },\n    {\n      startTime: \"05/23/17 04:34:22 +1200\",\n      serverName: \"Skynet.dedicated\",\n      processName: \"transaction_checks\",\n      instanceID: 4450,\n      Status: \"60\",\n      serverId: 2,\n      processId: 2,\n      status: \"Failed\",\n    },\n    {\n      startTime: \"14/06/17 04:34:22 +0000\",\n      serverName: \"Perplexed\",\n      processName: \"rollback_execute\",\n      instanceID: 8901,\n      Status: \"30\",\n      serverId: 3,\n      processId: 3,\n      status: \"In Progress\",\n    },\n    {\n      startTime: \"04/23/17 04:34:22 +1930\",\n      serverName: \"Grimlock.lantern\",\n      processName: \"deadlock_detect\",\n      instanceID: 1230,\n      Status: \"40\",\n      serverId: 4,\n      processId: 4,\n      status: \"Failed\",\n    },\n    {\n      startTime: \"04/23/17 04:34:22 +0800\",\n      serverName: \"CyberDust.internal\",\n      processName: \"data_parser\",\n      instanceID: 240,\n      Status: \"90\",\n      serverId: 5,\n      processId: 5,\n      status: \"Completed\",\n    },\n  ];\n\n  //fetched from database\n  const completedProcesses = [\n    {\n      startTime: \"04/19/17 04:34:22 +0000\",\n      serverName: \"CyberDust.domain\",\n      processName: \"query_tests\",\n      instanceID: 1301,\n      Status: \"Completed\",\n      serverId: 6,\n      processId: 6,\n      status: \"Completed\",\n    },\n    {\n      startTime: \"05/23/17 04:34:22 +1200\",\n      serverName: \"NoNameServer\",\n      processName: \"transaction_checks\",\n      instanceID: 2002,\n      Status: \"Failed\",\n      serverId: 7,\n      processId: 7,\n      status: \"Completed\",\n    },\n    {\n      startTime: \"14/06/17 04:34:22 +0000\",\n      serverName: \"Perplexed\",\n      processName: \"rollback_execute\",\n      instanceID: 2302,\n      Status: \"Completed\",\n      serverId: 8,\n      processId: 8,\n      status: \"Completed\",\n    },\n    {\n      startTime: \"04/23/17 04:34:22 +1930\",\n      serverName: \"Grimlock.lantern\",\n      processName: \"deadlock_detect\",\n      instanceID: 2221,\n      Status: \"Completed\",\n      serverId: 9,\n      processId: 9,\n      status: \"Completed\",\n    },\n  ];\n\n  const [processes, setProcesses] = useState([]);\n  const tableHeadDetails = [\n    \"Start Time\",\n    \"Server Name\",\n    \"Process Name\",\n    \"Instance ID\",\n    \"Status\",\n    \"Action\",\n    \"Details\",\n  ];\n  // Filters\n  const [filters, setFilters] = useState({\n    serverId: 0,\n    processId: 0,\n    processName: \"\",\n    serverName: \"\",\n    status: \"\",\n  });\n\n  const filterProcesses = (\n    processId,\n    serverId,\n    processName,\n    serverName,\n    status\n  ) => {\n    setFilters({\n      ...filters,\n      processId: processId === \"\" ? 0 : parseInt(processId),\n      serverId: serverId === \"\" ? 0 : parseInt(serverId),\n      processName: processName === \"\" ? \"\" : processName,\n      serverName: serverName === \"\" ? \"\" : serverName,\n      status: status === \"\" ? \"\" : status,\n    });\n  };\n\n  const getInitialData = async () => {\n    await axios\n      .get(\"http://localhost:4000/api/server/processes/status\")\n      .then((resp) => {\n        console.log(resp);\n        setProcesses(resp.data);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n  // getInitialData();\n\n  // useEffect(() => {\n  //   let initialState;\n\n  //   setProcesses(initialState);\n  //   console.log(processes);\n  // }, [processes]);\n\n  useEffect(() => {\n    getInitialData();\n\n    const interval = setInterval(async () => {\n      let processStatus;\n      await axios\n        .get(\"http://localhost:4000/api/server/processes/status\")\n        .then((resp) => {\n          processStatus = resp.data;\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n      setProcesses(processStatus);\n      console.log(processes);\n    }, 15 * 1000);\n    return () => clearInterval(interval);\n  }, [processes]);\n\n  return (\n    <Router>\n      {/* <Header /> */}\n      <Switch>\n        <Route\n          exact\n          path=\"/Login\"\n          render={() => {\n            return (\n              <div>\n                {\" \"}\n                <Header /> <Login />\n              </div>\n            );\n          }}\n        />\n        <Route\n          exact\n          path=\"/\"\n          render={() => {\n            <Dashboard\n              details={details}\n              filterProcesses={filterProcesses}\n              processes={processes}\n              tableHeadDetails={tableHeadDetails}\n              filters={filters}\n            />;\n          }}\n        />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n\n// useEffect(() => {\n//   let initialState;\n//   const getInitialData = async () => {\n//     await axios\n//       .get(\"http://localhost:4000/api/server/processes/status\")\n//       .then((resp) => {\n//         initialState = resp.data;\n//         console.log(resp);\n//       })\n//       .catch((err) => {\n//         console.log(err);\n//       });\n//   };\n//   getInitialData();\n//   setProcesses(initialState);\n//   console.log(processes);\n// }, [processes]);\n\n// useEffect(() => {\n//   const interval = setInterval(async () => {\n//     let processStatus;\n//     await axios\n//       .get(\"http://localhost:4000/api/server/processes/status\")\n//       .then((resp) => {\n//         processStatus = resp.data;\n//       })\n//       .catch((err) => {\n//         console.log(err);\n//       });\n//     setProcesses(processStatus);\n//     console.log(processes);\n//   }, 15 * 1000);\n//   return () => clearInterval(interval);\n// }, [processes]);\n"]},"metadata":{},"sourceType":"module"}