{"ast":null,"code":"var _jsxFileName = \"/Users/kashita/Desktop/DB/db_project/frontend/src/components/StartProcess.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { DropdownButton, Dropdown, Button, Form } from \"react-bootstrap\";\nimport axios from \"axios\";\nimport authHeader from \"../auth.js\";\nimport { Container } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst StartProcess = ({\n  processNames,\n  serverNames\n}) => {\n  _s();\n\n  const [server, setServer] = useState(\"Select Server\");\n  const [process, setProcess] = useState(\"Select Process\");\n  const [displayProcess, setDisplayProcess] = useState([]);\n\n  const handleSelectServer = e => {\n    setServer(e);\n    console.log(typeof server.processIds);\n    setDisplayProcess(server.processIds.processName);\n  };\n\n  const handleSelectProcess = e => {\n    setProcess(e);\n  };\n\n  const onSubmit = e => {\n    console.log(\"clicked\");\n    e.preventDefault();\n\n    if (server === \"Select Server\" || process === \"Select Process\") {\n      alert(\"please select server and process\");\n      return;\n    }\n\n    console.log(`from on submit server- ${server}`);\n    console.log(`from on submit process- ${process}`);\n    axios.post(\"http://localhost:4000/api/server/processes/start\", {\n      pname: process,\n      sname: server\n    }, {\n      headers: authHeader()\n    }).then(res => {\n      alert(\"res from startprocess in frontend process started succesfully\");\n      console.log(`from on submit server- ${server}`);\n      console.log(`from on submit process- ${process}`);\n      console.log(\"res from startprocess in frontend process started succesfully\");\n    }).catch(err => {\n      alert(\"failed to start process\");\n    });\n    setServer(\"Select Server\");\n    setProcess(\"Select Process\");\n  };\n\n  return (\n    /*#__PURE__*/\n\n    /* <h3>Start Process</h3>\n      <div>\n        <form\n          className=\"form-inline mx-auto d-inline-flex\"\n          style={{ alignContent: \"center\" }}\n        >\n          <div className=\"form-inline pt-4 ml-5 mr-2\">\n            <DropdownButton title={server} value={server}>\n              {details.map((data, index) => (\n                <Dropdown.Item\n                  title={data.server}\n                  key={index}\n                  eventKey={data.server}\n                  onSelect={handleSelectServer}\n                >\n                  {data.server}\n                </Dropdown.Item>\n              ))}\n            </DropdownButton>\n          </div>\n           <div className=\"form-inline pt-4 mr-2\">\n            <DropdownButton\n              className=\"custom-dd-button\"\n              title={process}\n              value={process}\n            >\n              {details\n                .filter((data) => server === data.server)\n                .map((data) =>\n                  data.process.map((process, index) => (\n                    <Dropdown.Item\n                      title={process}\n                      key={index}\n                      eventKey={process}\n                      onSelect={handleSelectProcess}\n                    >\n                      {process}\n                    </Dropdown.Item>\n                  ))\n                )}\n            </DropdownButton>\n          </div> */\n    _jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        children: /*#__PURE__*/_jsxDEV(Form.Row, {\n          className: \"form\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"exampleForm.ControlSelect1\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Server Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              as: \"select\",\n              onChange: e => handleSelectServer(e.target.value),\n              value: server,\n              className: \"form-control\",\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 115,\n                columnNumber: 15\n              }, this), serverNames && serverNames.map(s => /*#__PURE__*/_jsxDEV(\"option\", {\n                children: s.serverName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 117,\n                columnNumber: 40\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"exampleForm.ControlSelect1\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              className: \"form-label\",\n              children: \"Process Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              as: \"select\",\n              onChange: e => handleSelectProcess(e.target.value),\n              value: process,\n              className: \"form-control\",\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 128,\n                columnNumber: 15\n              }, this), displayProcess.map(p => /*#__PURE__*/_jsxDEV(\"option\", {\n                children: \" p\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 130,\n                columnNumber: 17\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            className: \"custom-btn-primary\",\n            variant: \"primary\",\n            onClick: onSubmit,\n            children: \"Start\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 5\n    }, this)\n  );\n};\n\n_s(StartProcess, \"mCokcdnJJBfesMI95xvHzYTnShU=\");\n\n_c = StartProcess;\nexport default StartProcess;\n\nvar _c;\n\n$RefreshReg$(_c, \"StartProcess\");","map":{"version":3,"sources":["/Users/kashita/Desktop/DB/db_project/frontend/src/components/StartProcess.js"],"names":["React","useState","DropdownButton","Dropdown","Button","Form","axios","authHeader","Container","StartProcess","processNames","serverNames","server","setServer","process","setProcess","displayProcess","setDisplayProcess","handleSelectServer","e","console","log","processIds","processName","handleSelectProcess","onSubmit","preventDefault","alert","post","pname","sname","headers","then","res","catch","err","target","value","map","s","serverName","p"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,cAAT,EAAyBC,QAAzB,EAAmCC,MAAnC,EAA2CC,IAA3C,QAAuD,iBAAvD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,SAAT,QAA0B,iBAA1B;;;AAEA,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA,YAAF;AAAgBC,EAAAA;AAAhB,CAAD,KAAmC;AAAA;;AACtD,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBZ,QAAQ,CAAC,eAAD,CAApC;AACA,QAAM,CAACa,OAAD,EAAUC,UAAV,IAAwBd,QAAQ,CAAC,gBAAD,CAAtC;AACA,QAAM,CAACe,cAAD,EAAiBC,iBAAjB,IAAsChB,QAAQ,CAAC,EAAD,CAApD;;AAEA,QAAMiB,kBAAkB,GAAIC,CAAD,IAAO;AAChCN,IAAAA,SAAS,CAACM,CAAD,CAAT;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAOT,MAAM,CAACU,UAA1B;AAEAL,IAAAA,iBAAiB,CAACL,MAAM,CAACU,UAAP,CAAkBC,WAAnB,CAAjB;AACD,GALD;;AAOA,QAAMC,mBAAmB,GAAIL,CAAD,IAAO;AACjCJ,IAAAA,UAAU,CAACI,CAAD,CAAV;AACD,GAFD;;AAIA,QAAMM,QAAQ,GAAIN,CAAD,IAAO;AACtBC,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACAF,IAAAA,CAAC,CAACO,cAAF;;AAEA,QAAId,MAAM,KAAK,eAAX,IAA8BE,OAAO,KAAK,gBAA9C,EAAgE;AAC9Da,MAAAA,KAAK,CAAC,kCAAD,CAAL;AACA;AACD;;AACDP,IAAAA,OAAO,CAACC,GAAR,CAAa,0BAAyBT,MAAO,EAA7C;AACAQ,IAAAA,OAAO,CAACC,GAAR,CAAa,2BAA0BP,OAAQ,EAA/C;AACAR,IAAAA,KAAK,CACFsB,IADH,CAEI,kDAFJ,EAGI;AACEC,MAAAA,KAAK,EAAEf,OADT;AAEEgB,MAAAA,KAAK,EAAElB;AAFT,KAHJ,EAOI;AACEmB,MAAAA,OAAO,EAAExB,UAAU;AADrB,KAPJ,EAWGyB,IAXH,CAWSC,GAAD,IAAS;AACbN,MAAAA,KAAK,CAAC,+DAAD,CAAL;AACAP,MAAAA,OAAO,CAACC,GAAR,CAAa,0BAAyBT,MAAO,EAA7C;AACAQ,MAAAA,OAAO,CAACC,GAAR,CAAa,2BAA0BP,OAAQ,EAA/C;AACAM,MAAAA,OAAO,CAACC,GAAR,CACE,+DADF;AAGD,KAlBH,EAmBGa,KAnBH,CAmBUC,GAAD,IAAS;AACdR,MAAAA,KAAK,CAAC,yBAAD,CAAL;AACD,KArBH;AAuBAd,IAAAA,SAAS,CAAC,eAAD,CAAT;AACAE,IAAAA,UAAU,CAAC,gBAAD,CAAV;AACD,GAnCD;;AAqCA;AAAA;;AACE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEI,YAAC,SAAD;AAAA,6BACE,QAAC,IAAD;AAAA,+BACE,QAAC,IAAD,CAAM,GAAN;AAAU,UAAA,SAAS,EAAC,MAApB;AAAA,kCACE,QAAC,IAAD,CAAM,KAAN;AAAY,YAAA,SAAS,EAAC,4BAAtB;AAAA,oCACE,QAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE,QAAC,IAAD,CAAM,OAAN;AACE,cAAA,EAAE,EAAC,QADL;AAEE,cAAA,QAAQ,EAAGI,CAAD,IAAOD,kBAAkB,CAACC,CAAC,CAACiB,MAAF,CAASC,KAAV,CAFrC;AAGE,cAAA,KAAK,EAAEzB,MAHT;AAIE,cAAA,SAAS,EAAC,cAJZ;AAAA,sCAME;AAAA;AAAA;AAAA;AAAA,sBANF,EAOGD,WAAW,IACVA,WAAW,CAAC2B,GAAZ,CAAiBC,CAAD,iBAAO;AAAA,0BAASA,CAAC,CAACC;AAAX;AAAA;AAAA;AAAA;AAAA,sBAAvB,CARJ;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAcE,QAAC,IAAD,CAAM,KAAN;AAAY,YAAA,SAAS,EAAC,4BAAtB;AAAA,oCACE,QAAC,IAAD,CAAM,KAAN;AAAY,cAAA,SAAS,EAAC,YAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE,QAAC,IAAD,CAAM,OAAN;AACE,cAAA,EAAE,EAAC,QADL;AAEE,cAAA,QAAQ,EAAGrB,CAAD,IAAOK,mBAAmB,CAACL,CAAC,CAACiB,MAAF,CAASC,KAAV,CAFtC;AAGE,cAAA,KAAK,EAAEvB,OAHT;AAIE,cAAA,SAAS,EAAC,cAJZ;AAAA,sCAME;AAAA;AAAA;AAAA;AAAA,sBANF,EAOGE,cAAc,CAACsB,GAAf,CAAoBG,CAAD,iBAClB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADD,CAPH;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,kBAdF,eA6BE,QAAC,MAAD;AACE,YAAA,SAAS,EAAC,oBADZ;AAEE,YAAA,OAAO,EAAC,SAFV;AAGE,YAAA,OAAO,EAAEhB,QAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBA7BF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AA5CF;AAsFD,CA3ID;;GAAMhB,Y;;KAAAA,Y;AA6IN,eAAeA,YAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { DropdownButton, Dropdown, Button, Form } from \"react-bootstrap\";\nimport axios from \"axios\";\nimport authHeader from \"../auth.js\";\nimport { Container } from \"react-bootstrap\";\n\nconst StartProcess = ({ processNames, serverNames }) => {\n  const [server, setServer] = useState(\"Select Server\");\n  const [process, setProcess] = useState(\"Select Process\");\n  const [displayProcess, setDisplayProcess] = useState([]);\n\n  const handleSelectServer = (e) => {\n    setServer(e);\n    console.log(typeof server.processIds);\n\n    setDisplayProcess(server.processIds.processName);\n  };\n\n  const handleSelectProcess = (e) => {\n    setProcess(e);\n  };\n\n  const onSubmit = (e) => {\n    console.log(\"clicked\");\n    e.preventDefault();\n\n    if (server === \"Select Server\" || process === \"Select Process\") {\n      alert(\"please select server and process\");\n      return;\n    }\n    console.log(`from on submit server- ${server}`);\n    console.log(`from on submit process- ${process}`);\n    axios\n      .post(\n        \"http://localhost:4000/api/server/processes/start\",\n        {\n          pname: process,\n          sname: server,\n        },\n        {\n          headers: authHeader(),\n        }\n      )\n      .then((res) => {\n        alert(\"res from startprocess in frontend process started succesfully\");\n        console.log(`from on submit server- ${server}`);\n        console.log(`from on submit process- ${process}`);\n        console.log(\n          \"res from startprocess in frontend process started succesfully\"\n        );\n      })\n      .catch((err) => {\n        alert(\"failed to start process\");\n      });\n\n    setServer(\"Select Server\");\n    setProcess(\"Select Process\");\n  };\n\n  return (\n    /* <h3>Start Process</h3>\n      <div>\n        <form\n          className=\"form-inline mx-auto d-inline-flex\"\n          style={{ alignContent: \"center\" }}\n        >\n          <div className=\"form-inline pt-4 ml-5 mr-2\">\n            <DropdownButton title={server} value={server}>\n              {details.map((data, index) => (\n                <Dropdown.Item\n                  title={data.server}\n                  key={index}\n                  eventKey={data.server}\n                  onSelect={handleSelectServer}\n                >\n                  {data.server}\n                </Dropdown.Item>\n              ))}\n            </DropdownButton>\n          </div>\n\n          <div className=\"form-inline pt-4 mr-2\">\n            <DropdownButton\n              className=\"custom-dd-button\"\n              title={process}\n              value={process}\n            >\n              {details\n                .filter((data) => server === data.server)\n                .map((data) =>\n                  data.process.map((process, index) => (\n                    <Dropdown.Item\n                      title={process}\n                      key={index}\n                      eventKey={process}\n                      onSelect={handleSelectProcess}\n                    >\n                      {process}\n                    </Dropdown.Item>\n                  ))\n                )}\n            </DropdownButton>\n          </div> */\n    <Container>\n      <Form>\n        <Form.Row className=\"form\">\n          <Form.Group controlId=\"exampleForm.ControlSelect1\">\n            <Form.Label>Server Name</Form.Label>\n            <Form.Control\n              as=\"select\"\n              onChange={(e) => handleSelectServer(e.target.value)}\n              value={server}\n              className=\"form-control\"\n            >\n              <option></option>\n              {serverNames &&\n                serverNames.map((s) => <option>{s.serverName}</option>)}\n            </Form.Control>\n          </Form.Group>\n          <Form.Group controlId=\"exampleForm.ControlSelect1\">\n            <Form.Label className=\"form-label\">Process Name</Form.Label>\n            <Form.Control\n              as=\"select\"\n              onChange={(e) => handleSelectProcess(e.target.value)}\n              value={process}\n              className=\"form-control\"\n            >\n              <option></option>\n              {displayProcess.map((p) => (\n                <option> p</option>\n              ))}\n            </Form.Control>\n          </Form.Group>\n\n          <Button\n            className=\"custom-btn-primary\"\n            variant=\"primary\"\n            onClick={onSubmit}\n          >\n            Start\n          </Button>\n        </Form.Row>\n      </Form>\n    </Container>\n  );\n};\n\nexport default StartProcess;\n"]},"metadata":{},"sourceType":"module"}