{"ast":null,"code":"var _jsxFileName = \"/Users/kashita/Desktop/DB/db_project/frontend/src/App.js\",\n    _s = $RefreshSig$();\n\nimport \"./App.css\";\nimport { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport axios from \"axios\";\nimport Dashboard from \"./components/Dashboard\";\nimport Footer from \"./components/Footer\";\nimport Login from \"./components/Login\";\nimport authHeader from \"./auth.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const MAIN_SERVER = \"http://localhost:4000/\";\n  const [processes, setProcesses] = useState([]);\n  const [processNames, setProcessNames] = useState([]);\n  const [serverNames, setServerNames] = useState([]);\n  const [filters, setFilters] = useState({\n    serverId: 0,\n    processId: 0,\n    processName: \"\",\n    serverName: \"\",\n    status: \"\",\n    startDate: \"\",\n    endDate: \"\"\n  });\n\n  const filterProcesses = (processId, serverId, processName, serverName, status, startDate, endDate) => {\n    setFilters({ ...filters,\n      processId: processId === \"\" ? 0 : parseInt(processId),\n      serverId: serverId === \"\" ? 0 : parseInt(serverId),\n      processName: processName === \"\" ? \"\" : processName,\n      serverName: serverName === \"\" ? \"\" : serverName,\n      status: status === \"\" ? \"\" : status,\n      startDate: startDate === \"\" ? \"\" : startDate,\n      endDate: endDate === \"\" ? \"\" : endDate\n    });\n  };\n\n  const stopProcess = (serverId, osId) => {\n    console.log(serverId, osId);\n    const msg = {\n      osId: osId,\n      serverIp: serverId.ipAddress,\n      serverPort: serverId.port,\n      headers: {\n        \"Content-type\": \"application/json\",\n        mode: \"cors\"\n      }\n    };\n    axios.post(\"http://localhost:4000/api/server/processes/stop\", msg).then(res => {\n      alert(\"Process stopped succesfully\");\n    }).catch(err => {\n      alert(\"Failed to stop process\");\n    });\n  }; //getting status of all processes\n\n\n  useEffect(() => {\n    axios.get(\"http://localhost:4000/api/server/processes/status\", {\n      headers: authHeader()\n    }).then(resp => {\n      setProcesses(resp.data);\n    }).catch(err => {\n      alert(\"Failed to fetch status of processes\");\n    });\n    const interval = setInterval(() => {\n      axios.get(\"http://localhost:4000/api/server/processes/status\", {\n        headers: authHeader()\n      }).then(resp => {\n        setProcesses(resp.data);\n      }).catch(err => {\n        alert(\"Failed to fetch status of processes\");\n      });\n    }, 15 * 1000);\n    return () => clearInterval(interval);\n  }, []); //get request for all process names - stored in processNames\n\n  useEffect(() => {\n    axios.get(\"http://localhost:4000/api/server/processes/processList\").then(resp => {\n      setProcessNames(resp.data);\n    }).catch(err => {\n      alert(\"Fetching server names failed\");\n    });\n  }, []); //get request for all server names - stored in serverNames\n\n  useEffect(() => {\n    axios.get(\"http://localhost:4000/api/server/processes/serverList\").then(resp => {\n      setServerNames(resp.data);\n    }).catch(err => {\n      alert(\"Fetching server names failed\");\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: [/*#__PURE__*/_jsxDEV(Route, {\n      path: \"/login\",\n      exact: true,\n      component: Login\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/\",\n      exact: true,\n      children: [/*#__PURE__*/_jsxDEV(Dashboard, {\n        filterProcesses: filterProcesses,\n        processes: processes,\n        processNames: processNames,\n        serverNames: serverNames,\n        filters: filters,\n        stopProcess: stopProcess\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"gxsqsocyjcTzK8YazIs0kN3DTns=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/kashita/Desktop/DB/db_project/frontend/src/App.js"],"names":["useState","useEffect","BrowserRouter","Router","Route","axios","Dashboard","Footer","Login","authHeader","App","MAIN_SERVER","processes","setProcesses","processNames","setProcessNames","serverNames","setServerNames","filters","setFilters","serverId","processId","processName","serverName","status","startDate","endDate","filterProcesses","parseInt","stopProcess","osId","console","log","msg","serverIp","ipAddress","serverPort","port","headers","mode","post","then","res","alert","catch","err","get","resp","data","interval","setInterval","clearInterval"],"mappings":"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","sourcesContent":["import \"./App.css\";\nimport { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport axios from \"axios\";\n\nimport Dashboard from \"./components/Dashboard\";\nimport Footer from \"./components/Footer\";\nimport Login from \"./components/Login\";\nimport authHeader from \"./auth.js\";\n\nfunction App() {\n  const MAIN_SERVER = \"http://localhost:4000/\";\n\n  const [processes, setProcesses] = useState([]);\n  const [processNames, setProcessNames] = useState([]);\n  const [serverNames, setServerNames] = useState([]);\n\n  const [filters, setFilters] = useState({\n    serverId: 0,\n    processId: 0,\n    processName: \"\",\n    serverName: \"\",\n    status: \"\",\n    startDate: \"\",\n    endDate: \"\",\n  });\n\n  const filterProcesses = (\n    processId,\n    serverId,\n    processName,\n    serverName,\n    status,\n    startDate,\n    endDate\n  ) => {\n    setFilters({\n      ...filters,\n      processId: processId === \"\" ? 0 : parseInt(processId),\n      serverId: serverId === \"\" ? 0 : parseInt(serverId),\n      processName: processName === \"\" ? \"\" : processName,\n      serverName: serverName === \"\" ? \"\" : serverName,\n      status: status === \"\" ? \"\" : status,\n      startDate: startDate === \"\" ? \"\" : startDate,\n      endDate: endDate === \"\" ? \"\" : endDate,\n    });\n  };\n\n  const stopProcess = (serverId, osId) => {\n    console.log(serverId, osId);\n    const msg = {\n      osId: osId,\n      serverIp: serverId.ipAddress,\n      serverPort: serverId.port,\n\n      headers: {\n        \"Content-type\": \"application/json\",\n        mode: \"cors\",\n      },\n    };\n    axios\n      .post(\"http://localhost:4000/api/server/processes/stop\", msg)\n      .then((res) => {\n        alert(\"Process stopped succesfully\");\n      })\n      .catch((err) => {\n        alert(\"Failed to stop process\");\n      });\n  };\n\n  //getting status of all processes\n\n  useEffect(() => {\n    axios\n      .get(\"http://localhost:4000/api/server/processes/status\", {\n        headers: authHeader(),\n      })\n      .then((resp) => {\n        setProcesses(resp.data);\n      })\n      .catch((err) => {\n        alert(\"Failed to fetch status of processes\");\n      });\n\n    const interval = setInterval(() => {\n      axios\n        .get(\"http://localhost:4000/api/server/processes/status\", {\n          headers: authHeader(),\n        })\n        .then((resp) => {\n          setProcesses(resp.data);\n        })\n        .catch((err) => {\n          alert(\"Failed to fetch status of processes\");\n        });\n    }, 15 * 1000);\n    return () => clearInterval(interval);\n  }, []);\n\n  //get request for all process names - stored in processNames\n  useEffect(() => {\n    axios\n      .get(\"http://localhost:4000/api/server/processes/processList\")\n      .then((resp) => {\n        setProcessNames(resp.data);\n      })\n      .catch((err) => {\n        alert(\"Fetching server names failed\");\n      });\n  }, []);\n\n  //get request for all server names - stored in serverNames\n  useEffect(() => {\n    axios\n      .get(\"http://localhost:4000/api/server/processes/serverList\")\n      .then((resp) => {\n        setServerNames(resp.data);\n      })\n      .catch((err) => {\n        alert(\"Fetching server names failed\");\n      });\n  }, []);\n\n  return (\n    <Router>\n      <Route path=\"/login\" exact component={Login} />\n      <Route path=\"/\" exact>\n        <Dashboard\n          filterProcesses={filterProcesses}\n          processes={processes}\n          processNames={processNames}\n          serverNames={serverNames}\n          filters={filters}\n          stopProcess={stopProcess}\n        />\n        <Footer />\n      </Route>\n    </Router>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}