{"ast":null,"code":"import _objectSpread from\"/Users/kashita/Desktop/dbfrontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/kashita/Desktop/dbfrontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import\"./App.css\";import{useState,useEffect}from\"react\";import{BrowserRouter as Router,Route}from\"react-router-dom\";import\"bootstrap/dist/css/bootstrap.min.css\";import axios from\"axios\";import Dashboard from\"./components/Dashboard\";import Footer from\"./components/Footer\";import Login from\"./components/Login\";import authHeader from\"./auth.js\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function App(){var MAIN_SERVER=\"http://localhost:4000/\";var _useState=useState([]),_useState2=_slicedToArray(_useState,2),processes=_useState2[0],setProcesses=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),processNames=_useState4[0],setProcessNames=_useState4[1];var _useState5=useState([]),_useState6=_slicedToArray(_useState5,2),serverNames=_useState6[0],setServerNames=_useState6[1];var _useState7=useState({processName:\"\",serverName:\"\",status:\"\",startDate:\"\",endDate:\"\"}),_useState8=_slicedToArray(_useState7,2),filters=_useState8[0],setFilters=_useState8[1];var filterProcesses=function filterProcesses(processName,serverName,status,startDate,endDate){setFilters(_objectSpread(_objectSpread({},filters),{},{processName:processName===\"\"?\"\":processName,serverName:serverName===\"\"?\"\":serverName,status:status===\"\"?\"\":status,startDate:startDate===\"\"?\"\":startDate,endDate:endDate===\"\"?\"\":endDate}));};var stopProcess=function stopProcess(serverId,osId){console.log(serverId,osId);var msg={osId:osId,serverIp:serverId.ipAddress,serverPort:serverId.port};axios.post(\"http://localhost:4000/api/server/processes/stop\",msg,{headers:authHeader()}).then(function(res){alert(\"Process stopped succesfully\");}).catch(function(err){alert(\"Failed to stop process\");});};//getting status of all processes\nuseEffect(function(){axios.get(\"http://localhost:4000/api/server/processes/status\",{headers:authHeader()}).then(function(resp){setProcesses(resp.data);}).catch(function(err){console.log(\"Failed to fetch status of processes\");});var interval=setInterval(function(){axios.get(\"http://localhost:4000/api/server/processes/status\",{headers:authHeader()}).then(function(resp){setProcesses(resp.data);}).catch(function(err){console.log(\"Failed to fetch status of processes\");});},15*1000);return function(){return clearInterval(interval);};},[]);//get request for all process names - stored in processNames\nuseEffect(function(){axios.get(\"http://localhost:4000/api/server/processes/processList\").then(function(resp){setProcessNames(resp.data);}).catch(function(err){console.log(\"Fetching server names failed\");});},[]);//get request for all server names - stored in serverNames\nuseEffect(function(){axios.get(\"http://localhost:4000/api/server/processes/serverList\").then(function(resp){setServerNames(resp.data);}).catch(function(err){console.log(\"Fetching server names failed\");});},[]);return/*#__PURE__*/_jsxs(Router,{children:[/*#__PURE__*/_jsx(Route,{path:\"/login\",exact:true,component:Login}),/*#__PURE__*/_jsx(Route,{path:\"/\",exact:true,children:/*#__PURE__*/_jsx(Dashboard,{filterProcesses:filterProcesses,processes:processes,processNames:processNames,serverNames:serverNames,filters:filters,stopProcess:stopProcess})})]});}export default App;","map":{"version":3,"sources":["/Users/kashita/Desktop/dbfrontend/src/App.js"],"names":["useState","useEffect","BrowserRouter","Router","Route","axios","Dashboard","Footer","Login","authHeader","App","MAIN_SERVER","processes","setProcesses","processNames","setProcessNames","serverNames","setServerNames","processName","serverName","status","startDate","endDate","filters","setFilters","filterProcesses","stopProcess","serverId","osId","console","log","msg","serverIp","ipAddress","serverPort","port","post","headers","then","res","alert","catch","err","get","resp","data","interval","setInterval","clearInterval"],"mappings":"+SAAA,MAAO,WAAP,CACA,OAASA,QAAT,CAAmBC,SAAnB,KAAoC,OAApC,CACA,OAASC,aAAa,GAAIC,CAAAA,MAA1B,CAAkCC,KAAlC,KAA+C,kBAA/C,CACA,MAAO,sCAAP,CACA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CAEA,MAAOC,CAAAA,SAAP,KAAsB,wBAAtB,CACA,MAAOC,CAAAA,MAAP,KAAmB,qBAAnB,CACA,MAAOC,CAAAA,KAAP,KAAkB,oBAAlB,CACA,MAAOC,CAAAA,UAAP,KAAuB,WAAvB,C,wFAEA,QAASC,CAAAA,GAAT,EAAe,CACb,GAAMC,CAAAA,WAAW,CAAG,wBAApB,CAEA,cAAkCX,QAAQ,CAAC,EAAD,CAA1C,wCAAOY,SAAP,eAAkBC,YAAlB,eACA,eAAwCb,QAAQ,CAAC,EAAD,CAAhD,yCAAOc,YAAP,eAAqBC,eAArB,eACA,eAAsCf,QAAQ,CAAC,EAAD,CAA9C,yCAAOgB,WAAP,eAAoBC,cAApB,eAEA,eAA8BjB,QAAQ,CAAC,CACrCkB,WAAW,CAAE,EADwB,CAErCC,UAAU,CAAE,EAFyB,CAGrCC,MAAM,CAAE,EAH6B,CAIrCC,SAAS,CAAE,EAJ0B,CAKrCC,OAAO,CAAE,EAL4B,CAAD,CAAtC,yCAAOC,OAAP,eAAgBC,UAAhB,eAQA,GAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CACtBP,WADsB,CAEtBC,UAFsB,CAGtBC,MAHsB,CAItBC,SAJsB,CAKtBC,OALsB,CAMnB,CACHE,UAAU,gCACLD,OADK,MAERL,WAAW,CAAEA,WAAW,GAAK,EAAhB,CAAqB,EAArB,CAA0BA,WAF/B,CAGRC,UAAU,CAAEA,UAAU,GAAK,EAAf,CAAoB,EAApB,CAAyBA,UAH7B,CAIRC,MAAM,CAAEA,MAAM,GAAK,EAAX,CAAgB,EAAhB,CAAqBA,MAJrB,CAKRC,SAAS,CAAEA,SAAS,GAAK,EAAd,CAAmB,EAAnB,CAAwBA,SAL3B,CAMRC,OAAO,CAAEA,OAAO,GAAK,EAAZ,CAAiB,EAAjB,CAAsBA,OANvB,GAAV,CAQD,CAfD,CAiBA,GAAMI,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,QAAD,CAAWC,IAAX,CAAoB,CACtCC,OAAO,CAACC,GAAR,CAAYH,QAAZ,CAAsBC,IAAtB,EACA,GAAMG,CAAAA,GAAG,CAAG,CACVH,IAAI,CAAEA,IADI,CAEVI,QAAQ,CAAEL,QAAQ,CAACM,SAFT,CAGVC,UAAU,CAAEP,QAAQ,CAACQ,IAHX,CAAZ,CAOA9B,KAAK,CACF+B,IADH,CACQ,iDADR,CAC2DL,GAD3D,CACgE,CAAGM,OAAO,CACxE5B,UAAU,EADoD,CADhE,EAIG6B,IAJH,CAIQ,SAACC,GAAD,CAAS,CACbC,KAAK,CAAC,6BAAD,CAAL,CACD,CANH,EAOGC,KAPH,CAOS,SAACC,GAAD,CAAS,CACdF,KAAK,CAAC,wBAAD,CAAL,CACD,CATH,EAUD,CAnBD,CAqBA;AACAvC,SAAS,CAAC,UAAM,CACdI,KAAK,CACFsC,GADH,CACO,mDADP,CAC4D,CACxDN,OAAO,CAAE5B,UAAU,EADqC,CAD5D,EAIG6B,IAJH,CAIQ,SAACM,IAAD,CAAU,CACd/B,YAAY,CAAC+B,IAAI,CAACC,IAAN,CAAZ,CACD,CANH,EAOGJ,KAPH,CAOS,SAACC,GAAD,CAAS,CACdb,OAAO,CAACC,GAAR,CAAY,qCAAZ,EACD,CATH,EAWA,GAAMgB,CAAAA,QAAQ,CAAGC,WAAW,CAAC,UAAM,CACjC1C,KAAK,CACFsC,GADH,CACO,mDADP,CAC4D,CACxDN,OAAO,CAAE5B,UAAU,EADqC,CAD5D,EAIG6B,IAJH,CAIQ,SAACM,IAAD,CAAU,CACd/B,YAAY,CAAC+B,IAAI,CAACC,IAAN,CAAZ,CACD,CANH,EAOGJ,KAPH,CAOS,SAACC,GAAD,CAAS,CACdb,OAAO,CAACC,GAAR,CAAY,qCAAZ,EACD,CATH,EAUD,CAX2B,CAWzB,GAAK,IAXoB,CAA5B,CAYA,MAAO,kBAAMkB,CAAAA,aAAa,CAACF,QAAD,CAAnB,EAAP,CACD,CAzBQ,CAyBN,EAzBM,CAAT,CA2BA;AACA7C,SAAS,CAAC,UAAM,CACdI,KAAK,CACFsC,GADH,CACO,wDADP,EAEGL,IAFH,CAEQ,SAACM,IAAD,CAAU,CACd7B,eAAe,CAAC6B,IAAI,CAACC,IAAN,CAAf,CACD,CAJH,EAKGJ,KALH,CAKS,SAACC,GAAD,CAAS,CACdb,OAAO,CAACC,GAAR,CAAY,8BAAZ,EACD,CAPH,EAQD,CATQ,CASN,EATM,CAAT,CAWA;AACA7B,SAAS,CAAC,UAAM,CACdI,KAAK,CACFsC,GADH,CACO,uDADP,EAEGL,IAFH,CAEQ,SAACM,IAAD,CAAU,CACd3B,cAAc,CAAC2B,IAAI,CAACC,IAAN,CAAd,CACD,CAJH,EAKGJ,KALH,CAKS,SAACC,GAAD,CAAS,CACdb,OAAO,CAACC,GAAR,CAAY,8BAAZ,EACD,CAPH,EAQD,CATQ,CASN,EATM,CAAT,CAWA,mBACE,MAAC,MAAD,yBACE,KAAC,KAAD,EAAO,IAAI,CAAC,QAAZ,CAAqB,KAAK,KAA1B,CAA2B,SAAS,CAAEtB,KAAtC,EADF,cAEE,KAAC,KAAD,EAAO,IAAI,CAAC,GAAZ,CAAgB,KAAK,KAArB,uBACE,KAAC,SAAD,EACE,eAAe,CAAEiB,eADnB,CAEE,SAAS,CAAEb,SAFb,CAGE,YAAY,CAAEE,YAHhB,CAIE,WAAW,CAAEE,WAJf,CAKE,OAAO,CAAEO,OALX,CAME,WAAW,CAAEG,WANf,EADF,EAFF,GADF,CAgBD,CAED,cAAehB,CAAAA,GAAf","sourcesContent":["import \"./App.css\";\nimport { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport axios from \"axios\";\n\nimport Dashboard from \"./components/Dashboard\";\nimport Footer from \"./components/Footer\";\nimport Login from \"./components/Login\";\nimport authHeader from \"./auth.js\";\n\nfunction App() {\n  const MAIN_SERVER = \"http://localhost:4000/\";\n\n  const [processes, setProcesses] = useState([]);\n  const [processNames, setProcessNames] = useState([]);\n  const [serverNames, setServerNames] = useState([]);\n\n  const [filters, setFilters] = useState({\n    processName: \"\",\n    serverName: \"\",\n    status: \"\",\n    startDate: \"\",\n    endDate: \"\",\n  });\n\n  const filterProcesses = (\n    processName,\n    serverName,\n    status,\n    startDate,\n    endDate\n  ) => {\n    setFilters({\n      ...filters,\n      processName: processName === \"\" ? \"\" : processName,\n      serverName: serverName === \"\" ? \"\" : serverName,\n      status: status === \"\" ? \"\" : status,\n      startDate: startDate === \"\" ? \"\" : startDate,\n      endDate: endDate === \"\" ? \"\" : endDate,\n    });\n  };\n\n  const stopProcess = (serverId, osId) => {\n    console.log(serverId, osId);\n    const msg = {\n      osId: osId,\n      serverIp: serverId.ipAddress,\n      serverPort: serverId.port,\n    };\n\n\n    axios\n      .post(\"http://localhost:4000/api/server/processes/stop\", msg, {  headers: \n      authHeader()\n    })\n      .then((res) => {\n        alert(\"Process stopped succesfully\");\n      })\n      .catch((err) => {\n        alert(\"Failed to stop process\");\n      });\n  };\n\n  //getting status of all processes\n  useEffect(() => {\n    axios\n      .get(\"http://localhost:4000/api/server/processes/status\", {\n        headers: authHeader(),\n      })\n      .then((resp) => {\n        setProcesses(resp.data);\n      })\n      .catch((err) => {\n        console.log(\"Failed to fetch status of processes\");\n      });\n\n    const interval = setInterval(() => {\n      axios\n        .get(\"http://localhost:4000/api/server/processes/status\", {\n          headers: authHeader(),\n        })\n        .then((resp) => {\n          setProcesses(resp.data);\n        })\n        .catch((err) => {\n          console.log(\"Failed to fetch status of processes\");\n        });\n    }, 15 * 1000);\n    return () => clearInterval(interval);\n  }, []);\n\n  //get request for all process names - stored in processNames\n  useEffect(() => {\n    axios\n      .get(\"http://localhost:4000/api/server/processes/processList\")\n      .then((resp) => {\n        setProcessNames(resp.data);\n      })\n      .catch((err) => {\n        console.log(\"Fetching server names failed\");\n      });\n  }, []);\n\n  //get request for all server names - stored in serverNames\n  useEffect(() => {\n    axios\n      .get(\"http://localhost:4000/api/server/processes/serverList\")\n      .then((resp) => {\n        setServerNames(resp.data);\n      })\n      .catch((err) => {\n        console.log(\"Fetching server names failed\");\n      });\n  }, []);\n\n  return (\n    <Router>\n      <Route path=\"/login\" exact component={Login} />\n      <Route path=\"/\" exact>\n        <Dashboard\n          filterProcesses={filterProcesses}\n          processes={processes}\n          processNames={processNames}\n          serverNames={serverNames}\n          filters={filters}\n          stopProcess={stopProcess}\n        />\n        \n      </Route>\n    </Router>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}