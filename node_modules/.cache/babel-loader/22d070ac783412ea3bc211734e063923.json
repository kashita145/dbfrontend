{"ast":null,"code":"var _jsxFileName = \"/Users/kashita/Desktop/DB/db_project/frontend/src/App.js\",\n    _s = $RefreshSig$();\n\nimport \"./App.css\";\nimport { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Route, Link, Switch } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport axios from \"axios\";\nimport Table from \"react-bootstrap/Table\";\nimport Dashboard from \"./components/Dashboard\";\nimport Toast from \"react-bootstrap/Toast\";\nimport Header from \"./components/Header\";\nimport ProcessTable from \"./components/ProcessTable\";\nimport Filters from \"./components/Filters\";\nimport TableRows from \"./components/TableRows\";\nimport TableHead from \"./components/TableHead\"; //import ProcessTable from \"./components/ProcessTable\";\n\nimport Filter from \"./components/Filter\";\nimport StartProcess from \"./components/StartProcess\"; // import Dashboard from \"./components/Dashboard\";\n\nimport Login from \"./Login\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const details = [{\n    server: \"scripts\",\n    process: [\"p1\", \"p2\", \"process1\"]\n  }];\n  const runningProcesses = [{\n    startTime: \"04/19/17 04:34:22 +0000\",\n    serverName: \"CyberDust.internal\",\n    processName: \"query_tests\",\n    instanceID: 114,\n    Status: \"10\",\n    serverId: 1,\n    processId: 1,\n    status: \"Completed\"\n  }, {\n    startTime: \"05/23/17 04:34:22 +1200\",\n    serverName: \"Skynet.dedicated\",\n    processName: \"transaction_checks\",\n    instanceID: 4450,\n    Status: \"60\",\n    serverId: 2,\n    processId: 2,\n    status: \"Failed\"\n  }, {\n    startTime: \"14/06/17 04:34:22 +0000\",\n    serverName: \"Perplexed\",\n    processName: \"rollback_execute\",\n    instanceID: 8901,\n    Status: \"30\",\n    serverId: 3,\n    processId: 3,\n    status: \"In Progress\"\n  }, {\n    startTime: \"04/23/17 04:34:22 +1930\",\n    serverName: \"Grimlock.lantern\",\n    processName: \"deadlock_detect\",\n    instanceID: 1230,\n    Status: \"40\",\n    serverId: 4,\n    processId: 4,\n    status: \"Failed\"\n  }, {\n    startTime: \"04/23/17 04:34:22 +0800\",\n    serverName: \"CyberDust.internal\",\n    processName: \"data_parser\",\n    instanceID: 240,\n    Status: \"90\",\n    serverId: 5,\n    processId: 5,\n    status: \"Completed\"\n  }]; //fetched from database\n\n  const completedProcesses = [{\n    startTime: \"04/19/17 04:34:22 +0000\",\n    serverName: \"CyberDust.domain\",\n    processName: \"query_tests\",\n    instanceID: 1301,\n    Status: \"Completed\",\n    serverId: 6,\n    processId: 6,\n    status: \"Completed\"\n  }, {\n    startTime: \"05/23/17 04:34:22 +1200\",\n    serverName: \"NoNameServer\",\n    processName: \"transaction_checks\",\n    instanceID: 2002,\n    Status: \"Failed\",\n    serverId: 7,\n    processId: 7,\n    status: \"Completed\"\n  }, {\n    startTime: \"14/06/17 04:34:22 +0000\",\n    serverName: \"Perplexed\",\n    processName: \"rollback_execute\",\n    instanceID: 2302,\n    Status: \"Completed\",\n    serverId: 8,\n    processId: 8,\n    status: \"Completed\"\n  }, {\n    startTime: \"04/23/17 04:34:22 +1930\",\n    serverName: \"Grimlock.lantern\",\n    processName: \"deadlock_detect\",\n    instanceID: 2221,\n    Status: \"Completed\",\n    serverId: 9,\n    processId: 9,\n    status: \"Completed\"\n  }];\n  const [processes, setProcesses] = useState([]);\n  const [processNames, setProcessNames] = useState([]);\n  const [serverNames, setServerNames] = useState([]);\n  const tableHeadDetails = [\"Start Time\", \"Server Name\", \"Process Name\", \"Instance ID\", \"Status\", \"Action\", \"Details\"]; // Filters\n\n  const [filters, setFilters] = useState({\n    serverId: 0,\n    processId: 0,\n    processName: \"\",\n    serverName: \"\",\n    status: \"\",\n    startDate: \"\",\n    endDate: \"\"\n  });\n\n  const filterProcesses = (processId, serverId, processName, serverName, status, startDate, endDate) => {\n    setFilters({ ...filters,\n      processId: processId === \"\" ? 0 : parseInt(processId),\n      serverId: serverId === \"\" ? 0 : parseInt(serverId),\n      processName: processName === \"\" ? \"\" : processName,\n      serverName: serverName === \"\" ? \"\" : serverName,\n      status: status === \"\" ? \"\" : status,\n      startDate: startDate === \"\" ? \"\" : startDate,\n      endDate: endDate === \"\" ? \"\" : endDate\n    });\n  }; // send stop request\n\n\n  const stopProcess = (serverId, processId) => {\n    console.log(serverId, processId);\n    const msg = {\n      pid: processId,\n      sname: serverId,\n      headers: {\n        \"Content-type\": \"application/json\",\n        mode: \"cors\"\n      }\n    };\n    axios.post(\"http://localhost:4000/api/server/processes/stop\", msg).then(res => {\n      console.log(res);\n    });\n  };\n\n  useEffect(() => {\n    axios.get(\"http://localhost:4000/api/server/processes/status\").then(resp => {\n      setProcesses(resp.data);\n    }).catch(err => {\n      console.log(err);\n    });\n    const interval = setInterval(() => {\n      axios.get(\"http://localhost:4000/api/server/processes/status\").then(resp => {\n        setProcesses(resp.data);\n        console.log(resp.data);\n      }).catch(err => {\n        console.log(err);\n      });\n    }, 15 * 1000);\n    return () => clearInterval(interval);\n  }, []); // useEffect(() => {\n  //   axios\n  //     .get(\"http://localhost:4000/api/server/processes/processList\")\n  //     .then((resp) => {\n  //       setProcessNames(resp.data);\n  //       console.log(resp.data);\n  //     })\n  //     .catch((err) => {\n  //       console.log(err);\n  //     });\n  // }, []);\n  // useEffect(() => {\n  //   axios\n  //     .get(\"http://localhost:4000/api/server/processes/serverList\")\n  //     .then((resp) => {\n  //       setServerNames(resp.data);\n  //       console.log(resp.data);\n  //     })\n  //     .catch((err) => {\n  //       console.log(err);\n  //     });\n  // }, []);\n\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: [/*#__PURE__*/_jsxDEV(Route, {\n      path: \"/login\",\n      component: Login\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/\",\n      exact: true,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"container\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            style: {\n              textAlign: \"center\"\n            },\n            children: \" RTB Dashboard \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Filter, {\n            details: details,\n            filterProcesses: filterProcesses,\n            processes: processes,\n            processNames: processNames,\n            serverNames: serverNames\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 246,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"custom-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Process Logs\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 261,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 262,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Table, {\n              responsive: true,\n              hover: true,\n              className: \"text-center\",\n              children: [/*#__PURE__*/_jsxDEV(TableHead, {\n                details: tableHeadDetails\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 264,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(TableRows, {\n                processes: processes,\n                running: true,\n                filters: filters,\n                stopProcess: stopProcess\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 265,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 263,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 240,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"26meW3cSBVmqrU5bjap0OhLFQV8=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/kashita/Desktop/DB/db_project/frontend/src/App.js"],"names":["useState","useEffect","BrowserRouter","Router","Route","Link","Switch","axios","Table","Dashboard","Toast","Header","ProcessTable","Filters","TableRows","TableHead","Filter","StartProcess","Login","App","details","server","process","runningProcesses","startTime","serverName","processName","instanceID","Status","serverId","processId","status","completedProcesses","processes","setProcesses","processNames","setProcessNames","serverNames","setServerNames","tableHeadDetails","filters","setFilters","startDate","endDate","filterProcesses","parseInt","stopProcess","console","log","msg","pid","sname","headers","mode","post","then","res","get","resp","data","catch","err","interval","setInterval","clearInterval","textAlign"],"mappings":"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","sourcesContent":["import \"./App.css\";\nimport { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Route, Link, Switch } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport axios from \"axios\";\n\nimport Table from \"react-bootstrap/Table\";\nimport Dashboard from \"./components/Dashboard\";\nimport Toast from \"react-bootstrap/Toast\";\nimport Header from \"./components/Header\";\nimport ProcessTable from \"./components/ProcessTable\";\n\nimport Filters from \"./components/Filters\";\nimport TableRows from \"./components/TableRows\";\nimport TableHead from \"./components/TableHead\";\n\n//import ProcessTable from \"./components/ProcessTable\";\n\nimport Filter from \"./components/Filter\";\nimport StartProcess from \"./components/StartProcess\";\n// import Dashboard from \"./components/Dashboard\";\nimport Login from \"./Login\";\n\nfunction App() {\n  const details = [\n    {\n      server: \"scripts\",\n      process: [\"p1\", \"p2\", \"process1\"],\n    },\n  ];\n  const runningProcesses = [\n    {\n      startTime: \"04/19/17 04:34:22 +0000\",\n      serverName: \"CyberDust.internal\",\n      processName: \"query_tests\",\n      instanceID: 114,\n      Status: \"10\",\n      serverId: 1,\n      processId: 1,\n      status: \"Completed\",\n    },\n    {\n      startTime: \"05/23/17 04:34:22 +1200\",\n      serverName: \"Skynet.dedicated\",\n      processName: \"transaction_checks\",\n      instanceID: 4450,\n      Status: \"60\",\n      serverId: 2,\n      processId: 2,\n      status: \"Failed\",\n    },\n    {\n      startTime: \"14/06/17 04:34:22 +0000\",\n      serverName: \"Perplexed\",\n      processName: \"rollback_execute\",\n      instanceID: 8901,\n      Status: \"30\",\n      serverId: 3,\n      processId: 3,\n      status: \"In Progress\",\n    },\n    {\n      startTime: \"04/23/17 04:34:22 +1930\",\n      serverName: \"Grimlock.lantern\",\n      processName: \"deadlock_detect\",\n      instanceID: 1230,\n      Status: \"40\",\n      serverId: 4,\n      processId: 4,\n      status: \"Failed\",\n    },\n    {\n      startTime: \"04/23/17 04:34:22 +0800\",\n      serverName: \"CyberDust.internal\",\n      processName: \"data_parser\",\n      instanceID: 240,\n      Status: \"90\",\n      serverId: 5,\n      processId: 5,\n      status: \"Completed\",\n    },\n  ];\n\n  //fetched from database\n  const completedProcesses = [\n    {\n      startTime: \"04/19/17 04:34:22 +0000\",\n      serverName: \"CyberDust.domain\",\n      processName: \"query_tests\",\n      instanceID: 1301,\n      Status: \"Completed\",\n      serverId: 6,\n      processId: 6,\n      status: \"Completed\",\n    },\n    {\n      startTime: \"05/23/17 04:34:22 +1200\",\n      serverName: \"NoNameServer\",\n      processName: \"transaction_checks\",\n      instanceID: 2002,\n      Status: \"Failed\",\n      serverId: 7,\n      processId: 7,\n      status: \"Completed\",\n    },\n    {\n      startTime: \"14/06/17 04:34:22 +0000\",\n      serverName: \"Perplexed\",\n      processName: \"rollback_execute\",\n      instanceID: 2302,\n      Status: \"Completed\",\n      serverId: 8,\n      processId: 8,\n      status: \"Completed\",\n    },\n    {\n      startTime: \"04/23/17 04:34:22 +1930\",\n      serverName: \"Grimlock.lantern\",\n      processName: \"deadlock_detect\",\n      instanceID: 2221,\n      Status: \"Completed\",\n      serverId: 9,\n      processId: 9,\n      status: \"Completed\",\n    },\n  ];\n\n  const [processes, setProcesses] = useState([]);\n  const [processNames, setProcessNames] = useState([]);\n  const [serverNames, setServerNames] = useState([]);\n\n  const tableHeadDetails = [\n    \"Start Time\",\n    \"Server Name\",\n    \"Process Name\",\n    \"Instance ID\",\n    \"Status\",\n    \"Action\",\n    \"Details\",\n  ];\n  // Filters\n  const [filters, setFilters] = useState({\n    serverId: 0,\n    processId: 0,\n    processName: \"\",\n    serverName: \"\",\n    status: \"\",\n    startDate: \"\",\n    endDate: \"\",\n  });\n\n  const filterProcesses = (\n    processId,\n    serverId,\n    processName,\n    serverName,\n    status,\n    startDate,\n    endDate\n  ) => {\n    setFilters({\n      ...filters,\n      processId: processId === \"\" ? 0 : parseInt(processId),\n      serverId: serverId === \"\" ? 0 : parseInt(serverId),\n      processName: processName === \"\" ? \"\" : processName,\n      serverName: serverName === \"\" ? \"\" : serverName,\n      status: status === \"\" ? \"\" : status,\n      startDate: startDate === \"\" ? \"\" : startDate,\n      endDate: endDate === \"\" ? \"\" : endDate,\n    });\n  };\n\n  // send stop request\n  const stopProcess = (serverId, processId) => {\n    console.log(serverId, processId);\n    const msg = {\n      pid: processId,\n      sname: serverId,\n      headers: {\n        \"Content-type\": \"application/json\",\n        mode: \"cors\",\n      },\n    };\n    axios\n      .post(\"http://localhost:4000/api/server/processes/stop\", msg)\n      .then((res) => {\n        console.log(res);\n      });\n  };\n\n  useEffect(() => {\n    axios\n      .get(\"http://localhost:4000/api/server/processes/status\")\n      .then((resp) => {\n        setProcesses(resp.data);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n\n    const interval = setInterval(() => {\n      axios\n        .get(\"http://localhost:4000/api/server/processes/status\")\n        .then((resp) => {\n          setProcesses(resp.data);\n          console.log(resp.data);\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    }, 15 * 1000);\n    return () => clearInterval(interval);\n  }, []);\n\n  // useEffect(() => {\n  //   axios\n  //     .get(\"http://localhost:4000/api/server/processes/processList\")\n  //     .then((resp) => {\n  //       setProcessNames(resp.data);\n  //       console.log(resp.data);\n  //     })\n  //     .catch((err) => {\n  //       console.log(err);\n  //     });\n  // }, []);\n\n  // useEffect(() => {\n  //   axios\n  //     .get(\"http://localhost:4000/api/server/processes/serverList\")\n  //     .then((resp) => {\n  //       setServerNames(resp.data);\n  //       console.log(resp.data);\n  //     })\n  //     .catch((err) => {\n  //       console.log(err);\n  //     });\n  // }, []);\n\n  return (\n    <Router>\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/\" exact>\n        <div className=\"App\">\n          <div className=\"container\">\n            <h1 style={{ textAlign: \"center\" }}> RTB Dashboard </h1>\n            <Filter\n              details={details}\n              filterProcesses={filterProcesses}\n              processes={processes}\n              processNames={processNames}\n              serverNames={serverNames}\n            />\n            {/* \n          <ProcessTable\n            processes={processes}\n            running={true}\n            filters={filterProcesses}\n            details={tableHeadDetails}\n          /> */}\n            <div className=\"custom-container\">\n              <h3>Process Logs</h3>\n              <br />\n              <Table responsive hover className=\"text-center\">\n                <TableHead details={tableHeadDetails} />\n                <TableRows\n                  processes={processes}\n                  running={true}\n                  filters={filters}\n                  stopProcess={stopProcess}\n                />\n              </Table>\n            </div>\n          </div>\n        </div>\n      </Route>\n    </Router>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}